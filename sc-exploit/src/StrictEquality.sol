// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// ----------------------------------------------------- //
// ------------------- Vulnerability ------------------- //
// ----------------------------------------------------- //

/**
 * - 7 players, each player deposits 1 ether
 * - the last sender (7th player), will become the winner and withdraw all the funds
 *
 */
contract WeakLastSenderGame {
    uint constant public TARGET_AMOUNT = 7 ether;
    address public winner;
    function deposit() external payable {
        require(msg.value == 1 ether, "Must only 1 ether");
        require(address(this).balance <= TARGET_AMOUNT, "Already At Targeted Amount");
        if (address(this).balance == TARGET_AMOUNT) winner = msg.sender;
    }
    function withdraw() external {
        require(msg.sender == winner, "Only Winner Can Withdraw");
        (bool done, ) = msg.sender.call{value: address(this).balance}("");
        require(done, "failed to send");
    }
}

// ----------------------------------------------------- //
// --------------------  Solution  --------------------- //
// ----------------------------------------------------- //

contract StrongLastSenderGame {
    uint Count;
    address public winner;
    function deposit() external payable {
        require(msg.value == 1 ether, "Must only 1 ether");
        require(Count <= 7, "Already At Targeted Amount");
        Count ++;
        if (Count == 7) winner = msg.sender;
    }
    function withdraw() external {
        require(msg.sender == winner && msg.sender != address(0), "Only Winner Can Withdraw");
        (bool done, ) = msg.sender.call{value: address(this).balance}("");
        require(done, "failed to send");
    }
}