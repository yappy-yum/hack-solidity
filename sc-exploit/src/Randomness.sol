// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// ----------------------------------------------------- //
// ------------------- Vulnerability ------------------- //
// ----------------------------------------------------- //

contract WeakRaffle {
    function EnterRaffle(uint8 _digit) 
        external 
        view 
        returns(bool win) 
    {
        require(_digit < 10, "Must be Digit");
        uint8 Random = uint8(uint256(keccak256(abi.encodePacked(
            msg.sender, block.timestamp, block.number + 1, block.prevrandao
        ))) % 10);
        win = (_digit == Random);
    }
}

// ----------------------------------------------------- //
// --------------------  Solution  --------------------- //
// ----------------------------------------------------- //

import { VRFConsumerBaseV2Plus } from "chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol";
import { VRFV2PlusClient } from "chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol";

contract StrongRaffle is VRFConsumerBaseV2Plus {

    // struct RandomWordsRequest {
    //     bytes32 keyHash;
    //     uint256 subId;
    //     uint16 requestConfirmations;
    //     uint32 callbackGasLimit;
    //     uint32 numWords;
    //     bytes extraArgs;
    // }
    VRFV2PlusClient.RandomWordsRequest public config;

    struct Record {
        address _user;
        uint256 _digitGuessed;
        uint256 _digitGenerated;
    }
    mapping(uint _RaffleId => Record) public record;

    constructor(
        address _vrfCoordinator,
        bytes32  _keyHash,
        uint256 _subId,
        uint16 _requestConfirmations,
        uint32 _callbackGasLimit,
        uint32 _numWords,
        bool _nativePayment
    ) VRFConsumerBaseV2Plus(_vrfCoordinator) {
        config = VRFV2PlusClient.RandomWordsRequest({
            keyHash: _keyHash,
            subId: _subId,
            requestConfirmations: _requestConfirmations,
            callbackGasLimit: _callbackGasLimit,
            numWords: _numWords,
            extraArgs: VRFV2PlusClient._argsToBytes(VRFV2PlusClient.ExtraArgsV1(_nativePayment))
        });
    }

    function EnterRaffle(uint _digit) external /* nonReentrant */ {
        require(_digit < 10, "Must be a Digit");

        // Note: `requestRandomWords`
        // - initialize and runs the randomness generator off-chain
        // - generated randomness will wait for the block `requestConfirmations` arrival
        // - while waiting, return request id
        // - after the desire block has arrived, node automatically calls `fulfillRandomWords`

        // Note:
        // `s_vrfCoordinator` from VRFConsumerBaseV2Plus
        uint256 requestId = s_vrfCoordinator.requestRandomWords(config);

        record[requestId] = Record({
            _user: msg.sender,
            _digitGuessed: _digit,
            _digitGenerated: 0
        });
    }

    function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) 
        internal
        override
    {
        record[requestId]._digitGenerated = randomWords[0] % 10;
    }

}