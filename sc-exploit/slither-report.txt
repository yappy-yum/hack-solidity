INFO:Detectors:
Reentrancy in WeakBank.withdraw(uint256) (src/Reentrancy.sol#13-18):
        External calls:
        - (done,None) = msg.sender.call{value: _amount}() (src/Reentrancy.sol#15)
        State variables written after the call(s):
        - depositAmount[msg.sender] -= _amount (src/Reentrancy.sol#17)
        WeakBank.depositAmount (src/Reentrancy.sol#9) can be used in cross function reentrancies:
        - WeakBank.deposit() (src/Reentrancy.sol#10-12)
        - WeakBank.depositAmount (src/Reentrancy.sol#9)
        - WeakBank.withdraw(uint256) (src/Reentrancy.sol#13-18)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

INFO:Detectors:
WeakLastSenderGame.deposit() (src/StrictEquality.sol#16-20) uses a dangerous strict equality:
        - address(this).balance == TARGET_AMOUNT (src/StrictEquality.sol#19)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

INFO:Detectors:
WeakRaffle.EnterRaffle(uint8) (src/Randomness.sol#8-18) uses a weak PRNG: "Random = uint8(uint256(keccak256(bytes)(abi.encodePacked(msg.sender,block.timestamp,block.number + 1,block.prevrandao))) % 10) (src/Randomness.sol#14-17)" 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#weak-PRNG