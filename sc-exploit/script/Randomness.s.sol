// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import { VRFCoordinatorV2_5Mock } from "chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol";
import { Script } from "forge-std/Script.sol";
import { WeakRaffle, StrongRaffle } from "src/Randomness.sol";

contract DeployRaffle is Script {

    WeakRaffle WR;
    StrongRaffle SR;
    address Owner = makeAddr("Owner");

    /*//////////////////////////////////////////////////////////////
                                  Run
    //////////////////////////////////////////////////////////////*/    

    function run() public returns(WeakRaffle) {
        _deployWeakRaffle();
        _deployStrongRaffle();

        // Note:
        // only focus on vulnarable attacks
        return WR;
    }

    /*//////////////////////////////////////////////////////////////
                           Deploy WeakRaffle
    //////////////////////////////////////////////////////////////*/    

    function _deployWeakRaffle() private {
        WR = new WeakRaffle();
    }

    /*//////////////////////////////////////////////////////////////
                          Deploy StrongRaffle
    //////////////////////////////////////////////////////////////*/    

    function _deployStrongRaffle() private {
        // 1. create VRF Coordinator
        VRFCoordinatorV2_5Mock _vrfCoordinator = new VRFCoordinatorV2_5Mock({
            _baseFee: 0.05 ether,
            _gasPrice: 200_000,
            _weiPerUnitLink: 1e18
        });

        // 2. create subscription id 
        uint256 _subscriptionId = _vrfCoordinator.createSubscription();

        // 3. fund subscription
        _vrfCoordinator.fundSubscription({
            _subId: _subscriptionId, 
            _amount: 3 ether
        });
        
        // 4. deploy contract
        SR = new StrongRaffle({
            _vrfCoordinator: address(_vrfCoordinator),
            _keyHash: bytes32(keccak256(abi.encodePacked("whatever keyhash"))),
            _subId: _subscriptionId,
            _requestConfirmations: 3,
            _callbackGasLimit: 300_000,
            _numWords: 1,
            _nativePayment: false
        });

        // 5. Add Consumer
        _vrfCoordinator.addConsumer({
            subId: _subscriptionId, 
            consumer: address(SR)
        });
    }

}